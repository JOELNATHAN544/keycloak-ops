---
# Source: keycloak/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: keycloak-dev
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: keycloak/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak-dev
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: keycloak/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
automountServiceAccountToken: false
---
# Source: keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-dev
  labels:
    helm.sh/chart: keycloak-1.0.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/version: "26.4.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: keycloak/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
type: Opaque
data:
  postgres-password: "NGRmWE1HQklSNw=="
  password: "ZGV2LXBhc3N3b3Jk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: keycloak/templates/secret.yaml
# Keycloak Secrets
# Contains sensitive credentials for Keycloak admin and database
# SECURITY WARNING: Never commit passwords to Git!
# Best practices:
#   1. Use --set flags during helm install
#   2. Use external secret management (e.g., Sealed Secrets, External Secrets Operator)
#   3. Use existing secrets via .Values.keycloak.admin.existingSecret
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-dev
  labels:
    helm.sh/chart: keycloak-1.0.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/version: "26.4.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  # Admin credentials - required for initial setup
  admin-username: "admin"
  admin-password: "admin123"
  # Database password - only created if not using existing secret or embedded PostgreSQL
---
# Source: keycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-dev-postgresql-hl
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: keycloak/templates/service.yaml
# Keycloak Service - Main Service
# This service provides a stable endpoint for accessing Keycloak
# Type: ClusterIP (internal) - use Ingress for external access
apiVersion: v1
kind: Service
metadata:
  name: keycloak-dev
  labels:
    helm.sh/chart: keycloak-1.0.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/version: "26.4.0"
    app.kubernetes.io/managed-by: Helm
  # Optional annotations (e.g., for cloud load balancers)
spec:
  type: NodePort
  # Service ports
  ports:
    # HTTP port for web traffic (typically behind ingress)
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    # HTTPS port (optional, usually TLS termination at ingress)
    - port: 8443
      targetPort: https
      protocol: TCP
      name: https
  # Pod selector for routing traffic
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
---
# Source: keycloak/templates/service.yaml
# Keycloak Headless Service
# Required for StatefulSet-like behavior and pod discovery (JGroups clustering)
# This service allows pods to discover each other for distributed caching
apiVersion: v1
kind: Service
metadata:
  name: keycloak-dev-headless
  labels:
    helm.sh/chart: keycloak-1.0.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/version: "26.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  # No cluster IP - allows direct pod-to-pod communication
  clusterIP: None
  # Include not-ready pods for cluster formation
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
---
# Source: keycloak/templates/deployment.yaml
# Keycloak Deployment
# This deployment manages the Keycloak application pods
# Keycloak.X (Quarkus-based) is used for better performance and cloud-native features
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-dev
  labels:
    helm.sh/chart: keycloak-1.0.0
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/version: "26.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
# Replica count - managed by HPA if autoscaling is enabled
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: keycloak-dev
  template:
    metadata:
      annotations:
# Trigger pod restart when secrets change
        checksum/config: 784ba07c65f5ee00f7a71057983dd5457d41fa9f652420b76c61cc0ced21ded6
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: keycloak-dev
    spec:
# Use dedicated service account for RBAC
      serviceAccountName: keycloak-dev
# Pod-level security context (applies to all containers)
      securityContext:
        fsGroup: 1000
# Optional init containers for custom setup (e.g., theme installation)
      containers:
      - name: keycloak
        # Container-level security context (non-root, no privilege escalation)
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          # Keycloak.X (Quarkus-based) image from official registry
        image: "quay.io/keycloak/keycloak:26.4.0"
        imagePullPolicy: IfNotPresent
        command:
          - /opt/keycloak/bin/kc.sh
        args:
        # NOTE: Change to 'start' for production (requires TLS configuration)
          - start-dev
          # Environment variables for Keycloak configuration
        env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              name: keycloak-dev
              key: admin-username
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-dev
              key: admin-password
        - name: KC_DB
          value: "postgres"
        - name: KC_DB_URL_HOST
          value: "keycloak-dev-postgresql"
        - name: KC_DB_URL_PORT
          value: "5432"
        - name: KC_DB_URL_DATABASE
          value: "keycloak_dev"
        - name: KC_DB_USERNAME
          value: "keycloak_dev"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-dev-postgresql
              key: password
        - name: KC_PROXY
          value: "edge"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        - name: jgroups.dns.query
          value: keycloak-dev-headless
        - name: KC_HOSTNAME
          value: 192.168.56.10
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health/live
            port: 9000
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health/ready
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /health/started
            port: 9000
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
      volumes:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - keycloak
              topologyKey: kubernetes.io/hostname
            weight: 100
---
# Source: keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak-dev-postgresql
  namespace: "keycloak-dev"
  labels:
    app.kubernetes.io/instance: keycloak-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.1
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: keycloak-dev-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak-dev
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: keycloak-dev-postgresql
      labels:
        app.kubernetes.io/instance: keycloak-dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.1
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: keycloak-dev-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: keycloak-dev
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "keycloak_dev"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-dev-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-dev-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "keycloak_dev"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak_dev" -d "dbname=keycloak_dev" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "keycloak_dev" -d "dbname=keycloak_dev" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
